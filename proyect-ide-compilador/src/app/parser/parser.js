/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[13,19,23],$V1=[1,8],$V2=[11,15],$V3=[1,19],$V4=[16,22,23,32,33,35,46,47,48,49,50,51,52],$V5=[16,35,48,49,50,51,52],$V6=[2,39],$V7=[1,38],$V8=[1,39],$V9=[1,40],$Va=[16,48,49,50,51,52],$Vb=[16,23,35,46,47,48,49,50,51,52],$Vc=[1,49],$Vd=[11,41],$Ve=[2,56],$Vf=[1,51],$Vg=[1,56],$Vh=[2,30],$Vi=[1,57],$Vj=[1,58],$Vk=[1,59],$Vl=[1,60],$Vm=[1,61],$Vn=[1,64],$Vo=[1,71],$Vp=[1,72],$Vq=[1,73],$Vr=[38,41],$Vs=[16,36,44],$Vt=[1,84],$Vu=[1,82],$Vv=[1,83],$Vw=[1,85],$Vx=[1,86],$Vy=[1,87],$Vz=[1,88],$VA=[1,89],$VB=[1,90],$VC=[1,91],$VD=[1,92],$VE=[1,93],$VF=[1,94],$VG=[11,17,38,41,63,64,65,66,67,68,69,70,71,72,73,74],$VH=[16,22,48,49,50,51,52,59],$VI=[2,48],$VJ=[11,38,41,63,64,67,68,69,70,71,72,73,74],$VK=[11,38,41,67,68,69,70,71,72,73,74],$VL=[1,124],$VM=[1,125];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"initial":3,"program":4,"EOF":5,"pack":6,"imprts":7,"clase":8,"PACKAGE":9,"ids_imprt":10,"PUNTOCOMA":11,"imprt":12,"IMPORT":13,"term_imprt":14,"PUNTO":15,"ID":16,"POR":17,"visi_class":18,"CLASS":19,"LLAVEA":20,"sente_glos":21,"LLAVEC":22,"PUBLIC":23,"FINAL":24,"sent_glo":25,"declar_var_glo":26,"fun":27,"main_fun":28,"agrup":29,"items":30,"getSet":31,"GETTER":32,"SETTER":33,"statc":34,"STATIC":35,"PARENTESA":36,"paramets":37,"PARENTESC":38,"sentencias":39,"params":40,"COMA":41,"param":42,"type":43,"MAIN":44,"visi":45,"PRIVATE":46,"PROTECTED":47,"INT":48,"FLOAT":49,"BOOLEAN":50,"CHAR":51,"VOID":52,"sentencia":53,"declaracion_var":54,"asig":55,"oput":56,"IGUAL":57,"exp":58,"SYSTEM":59,"OUT":60,"PRINTLN":61,"PRINT":62,"MAS":63,"MENOS":64,"DIVISION":65,"MODULO":66,"EQUALS":67,"DIFERENTE":68,"MAYORQ":69,"MAYOROI":70,"MENORQ":71,"MENOROI":72,"OR":73,"AND":74,"ter_exp":75,"ENTERO":76,"DECIMAL":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PACKAGE",11:"PUNTOCOMA",13:"IMPORT",15:"PUNTO",16:"ID",17:"POR",19:"CLASS",20:"LLAVEA",22:"LLAVEC",23:"PUBLIC",24:"FINAL",32:"GETTER",33:"SETTER",35:"STATIC",36:"PARENTESA",38:"PARENTESC",41:"COMA",44:"MAIN",46:"PRIVATE",47:"PROTECTED",48:"INT",49:"FLOAT",50:"BOOLEAN",51:"CHAR",52:"VOID",57:"IGUAL",59:"SYSTEM",60:"OUT",61:"PRINTLN",62:"PRINT",63:"MAS",64:"MENOS",65:"DIVISION",66:"MODULO",67:"EQUALS",68:"DIFERENTE",69:"MAYORQ",70:"MAYOROI",71:"MENORQ",72:"MENOROI",73:"OR",74:"AND",76:"ENTERO",77:"DECIMAL"},
productions_: [0,[3,2],[4,3],[6,3],[6,0],[7,2],[7,0],[12,3],[10,3],[10,1],[14,3],[14,1],[8,6],[18,2],[18,1],[18,0],[21,2],[21,0],[25,1],[25,1],[25,1],[26,3],[26,4],[31,1],[31,1],[34,1],[34,0],[27,8],[27,7],[37,1],[37,0],[40,3],[40,1],[42,2],[42,2],[28,7],[45,1],[45,1],[45,1],[45,0],[43,1],[43,1],[43,1],[43,1],[43,1],[29,3],[29,3],[39,2],[39,0],[53,1],[53,1],[53,1],[54,3],[30,3],[30,5],[30,3],[30,1],[55,4],[56,9],[56,9],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,1],[58,3],[75,1],[75,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 47:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 48:
this.$ = []; 
break;
case 49:
this.$ =$$[$0];
break;
case 52:
this.$ = new yy.Declaration($$[$0-1], new yy.Operation($$[$01]));
break;
case 53:
this.$ =""+ $$[$0-2]+" , "+" > "+ $$[$0]+" < ";
break;
case 55:
this.$ = new yy.Token($$[$0-2],this._$.first_column, this._$.first_line);
break;
case 60:
this.$ = new yy.NodoOperation(null, $$[$0-2], $$[$0], yy.TypeOperation.SUMA, new yy.Token($$[$0-1],this._$.first_column, this._$.first_line));
break;
case 61:
this.$ = new yy.NodoOperation(null, $$[$0-2], $$[$0], yy.TypeOperation.RESTA, new yy.Token($$[$0-1],this._$.first_column, this._$.first_line));
break;
case 62:
this.$ = new yy.NodoOperation(null, $$[$0-2], $$[$0], yy.TypeOperation.MULTIPLICACION, new yy.Token($$[$0-1],this._$.first_column, this._$.first_line));
break;
case 63:
this.$ = new yy.NodoOperation(null, $$[$0-2], $$[$0], yy.TypeOperation.DIVISION, new yy.Token($$[$0-1],this._$.first_column, this._$.first_line));
break;
case 64:
this.$ = new yy.NodoOperation(null, $$[$0-2], $$[$0], yy.TypeOperation.MODULO, new yy.Token($$[$0-1],this._$.first_column, this._$.first_line));
break;
case 65:
this.$ = new yy.NodoOperation(null, $$[$0-2], $$[$0], yy.TypeOperation.EQUALS, new yy.Token($$[$0-1],this._$.first_column, this._$.first_line));
break;
case 66:
this.$ = new yy.NodoOperation(null, $$[$0-2], $$[$0], yy.TypeOperation.DIFERENTE, new yy.Token($$[$0-1],this._$.first_column, this._$.first_line));
break;
case 67:
this.$ = new yy.NodoOperation(null, $$[$0-2], $$[$0], yy.TypeOperation.MAYORQ, new yy.Token($$[$0-1],this._$.first_column, this._$.first_line));
break;
case 68:
this.$ = new yy.NodoOperation(null, $$[$0-2], $$[$0], yy.TypeOperation.MAYOROI, new yy.Token($$[$0-1],this._$.first_column, this._$.first_line));
break;
case 69:
this.$ = new yy.NodoOperation(null, $$[$0-2], $$[$0], yy.TypeOperation.MENORQ, new yy.Token($$[$0-1],this._$.first_column, this._$.first_line));
break;
case 70:
this.$ = new yy.NodoOperation(null, $$[$0-2], $$[$0], yy.TypeOperation.MENOROI, new yy.Token($$[$0-1],this._$.first_column, this._$.first_line));
break;
case 71:
this.$ = new yy.NodoOperation(null, $$[$0-2], $$[$0], yy.TypeOperation.OR, new yy.Token($$[$0-1],this._$.first_column, this._$.first_line));
break;
case 72:
this.$ = new yy.NodoOperation(null, $$[$0-2], $$[$0], yy.TypeOperation.AND, new yy.Token($$[$0-1],this._$.first_column, this._$.first_line));
break;
case 73:
this.$ = new yy.NodoOperation($$[$0]);
break;
case 74:
this.$ = new yy.NodoOperation($$[$0-2]);
break;
case 75:
this.$ = new yy.Dato(yy.TypeDato.INTEGER, parseInt($$[$0]));
break;
case 76:
this.$ = new yy.Dato(yy.TypeDato.DOUBLE, parseFloat($$[$0]));
break;
}
},
table: [o($V0,[2,4],{3:1,4:2,6:3,9:[1,4]}),{1:[3]},{5:[1,5]},o($V0,[2,6],{7:6}),{10:7,16:$V1},{1:[2,1]},{8:9,12:10,13:[1,12],18:11,19:[2,15],23:[1,13]},{11:[1,14],15:[1,15]},o($V2,[2,9]),{5:[2,2]},o($V0,[2,5]),{19:[1,16]},{10:17,16:$V1},{19:[2,14],24:[1,18]},o($V0,[2,3]),{16:$V3},{16:[1,20]},{11:[1,23],14:21,15:[1,22]},{19:[2,13]},o($V2,[2,8]),{20:[1,24]},o($V0,[2,7]),{16:$V3,17:[1,25]},o($V0,[2,11]),o($V4,[2,17],{21:26}),{11:[1,27]},o($V5,$V6,{25:29,26:30,27:31,28:32,29:33,31:34,45:35,22:[1,28],23:$V7,32:[1,36],33:[1,37],46:$V8,47:$V9}),o($V0,[2,10]),{5:[2,12]},o($V4,[2,16]),o($V4,[2,18]),o($V4,[2,19]),o($V4,[2,20]),{16:[1,42],30:41,36:[1,43],44:[1,44]},o($V5,$V6,{45:35,29:45,23:$V7,46:$V8,47:$V9}),o($Va,[2,26],{34:46,35:[1,47]}),o($Vb,[2,23]),o($Vb,[2,24]),o($V5,[2,36]),o($V5,[2,37]),o($V5,[2,38]),{11:[1,48],41:$Vc},o($Vd,$Ve,{36:[1,50],57:$Vf}),{16:$Vg,37:52,38:$Vh,40:53,42:54,43:55,48:$Vi,49:$Vj,50:$Vk,51:$Vl,52:$Vm},{36:[1,62]},{16:$Vn,30:63},{16:[1,66],43:65,48:$Vi,49:$Vj,50:$Vk,51:$Vl,52:$Vm},o($Va,[2,25]),o($V4,[2,21]),{16:[1,67]},{16:$Vg,37:68,38:$Vh,40:53,42:54,43:55,48:$Vi,49:$Vj,50:$Vk,51:$Vl,52:$Vm},{36:$Vo,58:69,75:70,76:$Vp,77:$Vq},{38:[1,74]},{38:[2,29],41:[1,75]},o($Vr,[2,32]),{16:[1,76]},{16:[1,77]},o($Vs,[2,40]),o($Vs,[2,41]),o($Vs,[2,42]),o($Vs,[2,43]),o($Vs,[2,44]),{38:[1,78]},{11:[1,79],41:$Vc},o($Vd,$Ve,{57:$Vf}),o($Vs,[2,45]),o($Vs,[2,46]),o($Vd,[2,53],{57:[1,80]}),{38:[1,81]},o($Vd,[2,55],{17:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF}),o($VG,[2,73]),{36:$Vo,58:95,75:70,76:$Vp,77:$Vq},o($VG,[2,75]),o($VG,[2,76]),{20:[1,96]},{16:$Vg,42:97,43:55,48:$Vi,49:$Vj,50:$Vk,51:$Vl,52:$Vm},o($Vr,[2,33]),o($Vr,[2,34]),{20:[1,98]},o($V4,[2,22]),{36:$Vo,58:99,75:70,76:$Vp,77:$Vq},{20:[1,100]},{36:$Vo,58:101,75:70,76:$Vp,77:$Vq},{36:$Vo,58:102,75:70,76:$Vp,77:$Vq},{36:$Vo,58:103,75:70,76:$Vp,77:$Vq},{36:$Vo,58:104,75:70,76:$Vp,77:$Vq},{36:$Vo,58:105,75:70,76:$Vp,77:$Vq},{36:$Vo,58:106,75:70,76:$Vp,77:$Vq},{36:$Vo,58:107,75:70,76:$Vp,77:$Vq},{36:$Vo,58:108,75:70,76:$Vp,77:$Vq},{36:$Vo,58:109,75:70,76:$Vp,77:$Vq},{36:$Vo,58:110,75:70,76:$Vp,77:$Vq},{36:$Vo,58:111,75:70,76:$Vp,77:$Vq},{36:$Vo,58:112,75:70,76:$Vp,77:$Vq},{36:$Vo,58:113,75:70,76:$Vp,77:$Vq},{17:$Vt,38:[1,114],63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF},o($VH,$VI,{39:115}),o($Vr,[2,31]),o($VH,$VI,{39:116}),o($Vd,[2,54],{17:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF}),o($VH,$VI,{39:117}),o($VJ,[2,60],{17:$Vt,65:$Vw,66:$Vx}),o($VJ,[2,61],{17:$Vt,65:$Vw,66:$Vx}),o($VG,[2,62]),o($VG,[2,63]),o($VG,[2,64]),o($VK,[2,65],{17:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VK,[2,66],{17:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VK,[2,67],{17:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VK,[2,68],{17:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VK,[2,69],{17:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VK,[2,70],{17:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o([11,38,41,73],[2,71],{17:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,74:$VF}),o([11,38,41,73,74],[2,72],{17:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD}),o($VG,[2,74]),{16:$VL,22:[1,118],43:123,48:$Vi,49:$Vj,50:$Vk,51:$Vl,52:$Vm,53:119,54:120,55:121,56:122,59:$VM},{16:$VL,22:[1,126],43:123,48:$Vi,49:$Vj,50:$Vk,51:$Vl,52:$Vm,53:119,54:120,55:121,56:122,59:$VM},{16:$VL,22:[1,127],43:123,48:$Vi,49:$Vj,50:$Vk,51:$Vl,52:$Vm,53:119,54:120,55:121,56:122,59:$VM},o($V4,[2,28]),o($VH,[2,47]),o($VH,[2,49]),o($VH,[2,50]),o($VH,[2,51]),{16:$Vn,30:128},{57:[1,129]},{15:[1,130]},o($V4,[2,35]),o($V4,[2,27]),{11:[1,131],41:$Vc},{36:$Vo,58:132,75:70,76:$Vp,77:$Vq},{60:[1,133]},o($VH,[2,52]),{11:[1,134],17:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF},{15:[1,135]},o($VH,[2,57]),{61:[1,136],62:[1,137]},{36:[1,138]},{36:[1,139]},{36:$Vo,58:140,75:70,76:$Vp,77:$Vq},{36:$Vo,58:141,75:70,76:$Vp,77:$Vq},{17:$Vt,38:[1,142],63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF},{17:$Vt,38:[1,143],63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF},{11:[1,144]},{11:[1,145]},o($VH,[2,58]),o($VH,[2,59])],
defaultActions: {5:[2,1],9:[2,2],18:[2,13],28:[2,12]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip */
break;
case 1:return "ENTERO"
break;
case 2:return "DECIMAL"
break;
case 3:return "INCRE"
break;
case 4:return "DECRE"
break;
case 5:return "MAS"
break;
case 6:return "MENOS"
break;
case 7:return "POR"
break;
case 8:return "DIVISION"
break;
case 9:return "MODULO"
break;
case 10:return "MAYOROI"                          
break;
case 11:return "MENOROI"
break;
case 12:return "MAYORQ"                          
break;
case 13:return "MENORQ"                          
break;
case 14:return "EQUALS"                          
break;
case 15:return "DIFERENTE"                         
break;
case 16:return "AND"
break;
case 17:return "OR"
break;
case 18:return "NOT"     
break;
case 19:return "COMA"                   
break;
case 20:return "PARENTESA"                            
break;
case 21:return "PARENTESC"                                
break;
case 22:return "PUNTOCOMA"                           
break;
case 23:return "IGUAL" 
break;
case 24:return "INT" 
break;
case 25:return "FLOAT"
break;
case 26:return "CHAR"
break;
case 27:return "BOOLEAN"
break;
case 28:return "STRING"
break;
case 29:return "IMPORT"
break;
case 30:return "PUBLIC"
break;
case 31:return "PRIVATE"
break;
case 32:return "PROTECTED"
break;
case 33:return "CLASS"
break;
case 34:return "FINAL"
break;
case 35:return "STATIC"
break;
case 36:return "VOID"
break;
case 37:return "MAIN"
break;
case 38:return "PACKAGE"
break;
case 39:return "PUNTO"
break;
case 40:return "LLAVEA"
break;
case 41:return "LLAVEC"
break;
case 42:return "CORCHETA"
break;
case 43:return "CORCHETAC"
break;
case 44:return "GETTER"
break;
case 45:return "SETTER"
break;
case 46:return "SYSTEM"
break;
case 47:return "OUT"
break;
case 48:return "PRINTLN"
break;
case 49:return "PRINT"
break;
case 50:return "ID"
break;
case 51:return "EOF"
break;
case 52: yy.Errores.push(new yy.ErrorSintx(yy_.yylloc.last_line, yy_.yylloc.last_column, yy_.yytext,"Lexema No reconocido por el analizador Lexico",yy.TypeError.LEXICO));
break;
}
},
rules: [/^(?:((\r|\n|\r\n)|[ \t\f]))/,/^(?:([0]|[1-9][0-9]*))/,/^(?:({integer}(\.[0-9]+)))/,/^(?:(\+\+))/,/^(?:(--))/,/^(?:(\+))/,/^(?:(-))/,/^(?:(\*))/,/^(?:(\/))/,/^(?:(%))/,/^(?:(>=))/,/^(?:(<=))/,/^(?:(>))/,/^(?:(<))/,/^(?:(==))/,/^(?:(!=))/,/^(?:(&&))/,/^(?:(\|\|))/,/^(?:(!))/,/^(?:(,))/,/^(?:(\())/,/^(?:(\)))/,/^(?:(;))/,/^(?:(=))/,/^(?:(int\b))/,/^(?:(float\b))/,/^(?:(CHAR\b))/,/^(?:(BOOLEAN\b))/,/^(?:(string\b))/,/^(?:(import\b))/,/^(?:(public\b))/,/^(?:(private\b))/,/^(?:(protected\b))/,/^(?:(class\b))/,/^(?:(final\b))/,/^(?:(static\b))/,/^(?:(void\b))/,/^(?:(main\b))/,/^(?:(package\b))/,/^(?:(\.))/,/^(?:(\{))/,/^(?:(\}))/,/^(?:(\[))/,/^(?:(\]))/,/^(?:(@Getter\b))/,/^(?:(@Setter\b))/,/^(?:(System\b))/,/^(?:(out\b))/,/^(?:(println\b))/,/^(?:(print\b))/,/^(?:([a-zA-Z_][a-zA-Z_0-9]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}